
namespace Direction
{
    int N = 0,
        E = 1,
        S = 2,
        W = 3;

    bool isRightTurn(int oldDir, int newDir)
    {
        return (oldDir + 1) % 4 == newDir;
    }
    bool isLeftTurn(int oldDir, int newDir)
    {
        return (oldDir + 3) % 4 == newDir;
    }
    bool isStraight(int oldDir, int newDir)
    {
        return oldDir == newDir;
    }
    bool is180(int oldDir, int newDir)
    {
        return (oldDir + 2) % 4 == newDir;
    }

    int nextNode(int currNode, int dir)
    {
        return nav_matrix[currNode][dir];
    }
    int nextDir(int currNode, int targetNode)
    {
        return dir_matrix[currNode][targetNode];
    }

    bool isNodeBeforeTarget(int node, int dir, int targetNode)
    {
        return nextNode(node, dir) == targetNode;
    }

    int nextNextNode(int currNode, int dir, int targetNode)
    {
        return nextNode(nextNode(currNode, dir), nextDir(currNode, targetNode));
    }
    int nextNextDir(int currNode, int dir, int targetNode)
    {
        return nextDir(nextNode(currNode, dir), targetNode);
    }
    bool isNodeBeforeNodeBeforeTarget(int node, int dir, int targetNode)
    {
        return nextNextNode(node, dir, targetNode) == targetNode;
    }

    // Auto-generated by "../script/codegen.py"
    // This is the direction matrix for the map.
    // It is used to decide which way to turn at a junction.
    // If the desired path is from node 3 to node 5,
    // then `dir_matrix[3][5]` will give the compass direction to head
    // based on the pre-calculated shortest path.
    int dir_matrix[20][20] = {{-1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                              {2, 1, 1, -1, 1, 1, 1, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0},
                              {3, 1, 1, 3, -1, 0, 1, 1, 3, 3, 3, 3, 1, 3, 3, 3, 3, 3, 3, 1},
                              {2, 2, 2, 2, 2, -1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2},
                              {3, 2, 1, 3, 3, 3, -1, 1, 3, 1, 1, 1, 1, 3, 3, 3, 3, 3, 3, 1},
                              {3, 3, 2, 3, 3, 3, 3, -1, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0},
                              {2, 2, 2, 2, 2, 2, 2, 2, -1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 1},
                              {3, 3, 1, 3, 3, 3, 3, 1, 3, -1, 1, 1, 1, 0, 0, 0, 0, 0, 3, 1},
                              {3, 1, 1, 3, 3, 3, 1, 1, 3, 3, -1, 2, 1, 3, 3, 3, 3, 3, 3, 1},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 0, 0, 0, 0, 0},
                              {2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, -1, 3, 3, 3, 3, 3, 3, 0},
                              {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 3, 0, 0, 0, 2, 2},
                              {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, -1, 1, 1, 1, 1, 1},
                              {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 1, 1, 2, 2},
                              {3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, -1, 2, 3, 3},
                              {0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, -1, 0, 0},
                              {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1, 2},
                              {2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, -1}};

    // Auto-generated by "../script/codegen.py"
    int nav_matrix[20][4] = {{3, -1, -1, -1},
                             {6, -1, -1, -1},
                             {7, -1, -1, -1},
                             {8, 4, 0, -1},
                             {5, 6, -1, 3},
                             {-1, -1, 4, -1},
                             {-1, 7, 1, 4},
                             {12, -1, 2, 6},
                             {18, 9, 3, -1},
                             {13, 10, -1, 8},
                             {-1, 12, 11, 9},
                             {10, -1, -1, -1},
                             {19, -1, 7, 10},
                             {15, -1, 9, 14},
                             {-1, 13, -1, -1},
                             {-1, 16, 13, -1},
                             {-1, -1, 17, 15},
                             {16, -1, -1, -1},
                             {-1, -1, 8, -1},
                             {-1, -1, 12, -1}};
}